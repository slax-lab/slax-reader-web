/**
 * Represents a streamed chunk of a chat completion response returned by model,
 * based on the provided input.
 */
export interface ChatCompletionChunk {
  /**
   * A unique identifier for the chat completion. Each chunk has the same ID.
   */
  id: string

  /**
   * A list of chat completion choices. Can contain more than one elements if `n` is
   * greater than 1. Can also be empty for the last chunk if you set
   * `stream_options: {"include_usage": true}`.
   */
  choices: Array<ChatCompletionChunk.Choice>

  /**
   * The Unix timestamp (in seconds) of when the chat completion was created. Each
   * chunk has the same timestamp.
   */
  created: number

  /**
   * The model to generate the completion.
   */
  model: string

  /**
   * The object type, which is always `chat.completion.chunk`.
   */
  object: 'chat.completion.chunk'
}

export namespace ChatCompletionChunk {
  export interface Choice {
    /**
     * A chat completion delta generated by streamed model responses.
     */
    delta: Choice.Delta[]

    finish_reason: null

    /**
     * The index of the choice in the list of choices.
     */
    index: number

    /**
     * Slax reader 指示当前消息的状态
     */
    status: null | 'processing' | 'finished_successfully' | 'finished_failed'
  }

  export namespace Choice {
    /**
     * A chat completion delta generated by streamed model responses.
     */
    export interface Delta {
      /**
       * The contents of the chunk message.
       */
      content?: string | null

      /**
       * Slax reader 需要本地执行的方法
       */
      name: string

      /**
       * The role of the author of this message.
       */
      role: 'user' | 'assistant' | 'tool'
    }
  }
}
